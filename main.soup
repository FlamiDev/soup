// prelude
// typ pub means allowed to construct from outside this file
typ pub Option A =
    | Some A
    | None

// dependent typing
// also {} is a tuple type and they can't have named fields
// use a more specific type if you think you need a named field
typ pub Vec T { len U32 } = len :
    | 0 -> {}
    | len -> { T; Vec T (len - 1) }

def pub map A B = Vec A -> (A -> B) -> Vec B
let map = items mapper ->
    items head:
        | { first; rest } -> { first mapper; rest map mapper }
        | {} -> {}

// no type definition is fine
// but cannot be public
// because that would make inference sad
let some_func = a b ->
    foo some_calc bar
    <- foo = a add b
    <- bar = 42

let pi_approx = 3.14159

has Order =
    greater => Self -> Self -> Bool
    less => Self -> Self -> Bool

use { d_readline } "io"

doc "Ask a question in the console and return the answer"
def d_ask = String -> String
let d_ask = question ->
    question cat " > ", readline

use { sum } "iter"

def pub sum_squares N = [N] -> N
    where N: Number
let sum_squares = numbers ->
    numbers map (_ pow 2), sum

// calling wasm target from js target
use { wasm_run } "js/wasm"
def call_wasm_test = U64 -> #target["wasm"] (U64 -> I32) -> I32
let call_wasm_test = value func -> func wasm_run value

// region js/wasm.soup
typ pub WasmFunc Args Returns = { file String }

def wasm_run Args Returns = WasmFunc Args Returns -> @Args -> Returns
let wasm_run = func, @args ->
    func file, js_load_wasm, js_call_wasm args, js_get_wasm_result
// endregion js/wasm.soup