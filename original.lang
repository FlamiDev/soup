//defines the list type
//any tuple of one type statisfies the list type
type List A = () | (A) + List A

#creates a tuple of four ints
let numbers = (1, 2, 3, 4)

//creates a sum function
let sum l:List Int = match l {
  (a) + rest -> a + sum rest
  () -> 0
}

//total will be the int 10
let total = numbers >> sum

//define a named tuple
type Day = (year:Int, month:Int, day:Int)
type Person = (name:Str, surname:Str, birth:Day)

//inheritance kinda
type Account = Person + (email:Str, password_hash:Str)
//merging types would mess up name to index mapping
//so if offsets aren't consistent with base type,
//compiler will create a duplicate function to handle that case
//if a base base is used and that one is consistent, just pass an offset pointer

//threads
//threads.map runs all in parallel
import threads
import internet/get
import lists/filter_none
let urls = ("google.com", "bing.com", "duckduckgo.com")
let results = threads/map urls (url = get url >> match {
  (200, headers, body) -> some body
  _ -> none
}) >> filter_none

//none and some come from built-in option type, defined like this
//the types are inferred as the return types of none and some
//union types must be distinguishable at runtime
//tuples are prefixed with their length so this works
let none = ()
let some a = (a)
type Option A = none | some A
