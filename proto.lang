// Required language features by this file 
// ignore value		_
// infer type		_
// later currying	?
// infix to prefix	!

// in prelude
type Option A = None | Some A
type Result A B = Ok A | Err B

// in prelude
let or a Option _ b = a match {
	Some a -> a
	None -> b
}

// in prelude
let or a Result _ b = a match {
	Ok a -> a
	Err _ -> b
}

doc "Divides every element in a by b, or 0 if b is 0"
test "normal division" {
	assert [1, 2, 3] div_map 2 == [0, 1, 1]
}
test "division by 0" {
	assert [1, 2, 3] div_map 0 == [0, 0, 0]
}
test "empty list" {
	mock map l f = l map (x -> x println; x f)
	assert [] div_map 2 == []
}
let div_map a List Int b Int = a map (x -> x div b or 0)

let sum = ? match {
	[] -> 0
	[x, ..xs] -> x + sum! xs
}

test "sum range" {
	assert [1..5] sum == 10
}

test "value compare" {
	assert Some Ok 12 == Some Ok 12
}

import File "file"
export let write_file Result file.FileStatus file.FileError content String path String = {
	// returns the error when it fails
	let Ok file = path open
	let res = file write content
	file close
	res
}

let folder = "some_folder"
let write_my_file = ? write_file "./{some_folder}/my_file"

import SomeLib "https://github.com/user/library"

type Day = (year Int, month Int, day Int)
type Person = (name String, birth Day)
type Account = Person + (email String, password_hash String)

let johns_account = ("John", (day  5, month  8, year  1990), "john@example.com", "4s5gre54hrh878i9uyt")
let Account (email, password_hash) = johns_account

// in prelude
trait Display A = (
	to_string  A -> String
)

let to_string a Day = todo "too lazy to implement"
let to_string a Person = "{a.name} was born on {a.birth.year}-{a.birth.month}-{a.birth.day}"
let info_for_john = "The info: {johns_account}"
